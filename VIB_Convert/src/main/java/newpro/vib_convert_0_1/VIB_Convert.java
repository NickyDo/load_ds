// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package newpro.vib_convert_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: VIB_Convert Purpose: VIB_Convert<br>
 * Description: VIB_Convert <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class VIB_Convert implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(excelPath != null){
				
					this.setProperty("excelPath", excelPath.toString());
				
			}
			
			if(outputCSV != null){
				
					this.setProperty("outputCSV", outputCSV.toString());
				
			}
			
		}

		public String excelPath;
		public String getExcelPath(){
			return this.excelPath;
		}
		
		public String outputCSV;
		public String getOutputCSV(){
			return this.outputCSV;
		}
		
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "VIB_Convert";
	private final String projectName = "NEWPRO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				VIB_Convert.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(VIB_Convert.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_NEWPRO_VIB_Convert = new byte[0];
    static byte[] commonByteArray_NEWPRO_VIB_Convert = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String UID;

				public String getUID () {
					return this.UID;
				}
				
			    public String LAST_NAME;

				public String getLAST_NAME () {
					return this.LAST_NAME;
				}
				
			    public String LAST_NAME_UD;

				public String getLAST_NAME_UD () {
					return this.LAST_NAME_UD;
				}
				
			    public String FIRST_NAME;

				public String getFIRST_NAME () {
					return this.FIRST_NAME;
				}
				
			    public String FIRST_NAME_UD;

				public String getFIRST_NAME_UD () {
					return this.FIRST_NAME_UD;
				}
				
			    public String ALIASES;

				public String getALIASES () {
					return this.ALIASES;
				}
				
			    public String ALIASES_UD;

				public String getALIASES_UD () {
					return this.ALIASES_UD;
				}
				
			    public String ALTERNATIVE_SPELLING;

				public String getALTERNATIVE_SPELLING () {
					return this.ALTERNATIVE_SPELLING;
				}
				
			    public String ALTERNATIVE_SPELLING_UD;

				public String getALTERNATIVE_SPELLING_UD () {
					return this.ALTERNATIVE_SPELLING_UD;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String CATEGORY_UD;

				public String getCATEGORY_UD () {
					return this.CATEGORY_UD;
				}
				
			    public String TITLE;

				public String getTITLE () {
					return this.TITLE;
				}
				
			    public String TITLE_UD;

				public String getTITLE_UD () {
					return this.TITLE_UD;
				}
				
			    public String SUB_CATEGORY;

				public String getSUB_CATEGORY () {
					return this.SUB_CATEGORY;
				}
				
			    public String SUB_CATEGORY_UD;

				public String getSUB_CATEGORY_UD () {
					return this.SUB_CATEGORY_UD;
				}
				
			    public String POSITION;

				public String getPOSITION () {
					return this.POSITION;
				}
				
			    public String POSITION_UD;

				public String getPOSITION_UD () {
					return this.POSITION_UD;
				}
				
			    public String AGE;

				public String getAGE () {
					return this.AGE;
				}
				
			    public String AGE_UD;

				public String getAGE_UD () {
					return this.AGE_UD;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DOB_UD;

				public String getDOB_UD () {
					return this.DOB_UD;
				}
				
			    public String PLACE_OF_BIRTH;

				public String getPLACE_OF_BIRTH () {
					return this.PLACE_OF_BIRTH;
				}
				
			    public String PLACE_OF_BIRTH_UD;

				public String getPLACE_OF_BIRTH_UD () {
					return this.PLACE_OF_BIRTH_UD;
				}
				
			    public String DECEASED;

				public String getDECEASED () {
					return this.DECEASED;
				}
				
			    public String DECEASED_UD;

				public String getDECEASED_UD () {
					return this.DECEASED_UD;
				}
				
			    public String PASSPORTS;

				public String getPASSPORTS () {
					return this.PASSPORTS;
				}
				
			    public String PASSPORTS_UD;

				public String getPASSPORTS_UD () {
					return this.PASSPORTS_UD;
				}
				
			    public String SSN;

				public String getSSN () {
					return this.SSN;
				}
				
			    public String SSN_UD;

				public String getSSN_UD () {
					return this.SSN_UD;
				}
				
			    public String LOCATIONS;

				public String getLOCATIONS () {
					return this.LOCATIONS;
				}
				
			    public String LOCATIONS_UD;

				public String getLOCATIONS_UD () {
					return this.LOCATIONS_UD;
				}
				
			    public String COUNTRIES;

				public String getCOUNTRIES () {
					return this.COUNTRIES;
				}
				
			    public String COUNTRIES_UD;

				public String getCOUNTRIES_UD () {
					return this.COUNTRIES_UD;
				}
				
			    public String COMPANIES;

				public String getCOMPANIES () {
					return this.COMPANIES;
				}
				
			    public String COMPANIES_UD;

				public String getCOMPANIES_UD () {
					return this.COMPANIES_UD;
				}
				
			    public String EI;

				public String getEI () {
					return this.EI;
				}
				
			    public String EI_UD;

				public String getEI_UD () {
					return this.EI_UD;
				}
				
			    public String LINKED_TO;

				public String getLINKED_TO () {
					return this.LINKED_TO;
				}
				
			    public String LINKED_TO_UD;

				public String getLINKED_TO_UD () {
					return this.LINKED_TO_UD;
				}
				
			    public String FUTHER_INFORMATION;

				public String getFUTHER_INFORMATION () {
					return this.FUTHER_INFORMATION;
				}
				
			    public String FUTHER_INFORMATION_UD;

				public String getFUTHER_INFORMATION_UD () {
					return this.FUTHER_INFORMATION_UD;
				}
				
			    public String KEYWORDS;

				public String getKEYWORDS () {
					return this.KEYWORDS;
				}
				
			    public String KEYWORDS_UD;

				public String getKEYWORDS_UD () {
					return this.KEYWORDS_UD;
				}
				
			    public String EXTERNAL_SOURCES;

				public String getEXTERNAL_SOURCES () {
					return this.EXTERNAL_SOURCES;
				}
				
			    public String EXTERNAL_SOURCES_UD;

				public String getEXTERNAL_SOURCES_UD () {
					return this.EXTERNAL_SOURCES_UD;
				}
				
			    public String ENTERED;

				public String getENTERED () {
					return this.ENTERED;
				}
				
			    public String ENTERED_UD;

				public String getENTERED_UD () {
					return this.ENTERED_UD;
				}
				
			    public String UPDATED;

				public String getUPDATED () {
					return this.UPDATED;
				}
				
			    public String UPDATED_UD;

				public String getUPDATED_UD () {
					return this.UPDATED_UD;
				}
				
			    public String EDITOR;

				public String getEDITOR () {
					return this.EDITOR;
				}
				
			    public String EDITOR_UD;

				public String getEDITOR_UD () {
					return this.EDITOR_UD;
				}
				
			    public String AGE_DATE;

				public String getAGE_DATE () {
					return this.AGE_DATE;
				}
				
			    public String AGE_DATE_UD;

				public String getAGE_DATE_UD () {
					return this.AGE_DATE_UD;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.UID == null) ? 0 : this.UID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.UID == null) {
							if (other.UID != null)
								return false;
						
						} else if (!this.UID.equals(other.UID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.UID = this.UID;
	            other.LAST_NAME = this.LAST_NAME;
	            other.LAST_NAME_UD = this.LAST_NAME_UD;
	            other.FIRST_NAME = this.FIRST_NAME;
	            other.FIRST_NAME_UD = this.FIRST_NAME_UD;
	            other.ALIASES = this.ALIASES;
	            other.ALIASES_UD = this.ALIASES_UD;
	            other.ALTERNATIVE_SPELLING = this.ALTERNATIVE_SPELLING;
	            other.ALTERNATIVE_SPELLING_UD = this.ALTERNATIVE_SPELLING_UD;
	            other.CATEGORY = this.CATEGORY;
	            other.CATEGORY_UD = this.CATEGORY_UD;
	            other.TITLE = this.TITLE;
	            other.TITLE_UD = this.TITLE_UD;
	            other.SUB_CATEGORY = this.SUB_CATEGORY;
	            other.SUB_CATEGORY_UD = this.SUB_CATEGORY_UD;
	            other.POSITION = this.POSITION;
	            other.POSITION_UD = this.POSITION_UD;
	            other.AGE = this.AGE;
	            other.AGE_UD = this.AGE_UD;
	            other.DOB = this.DOB;
	            other.DOB_UD = this.DOB_UD;
	            other.PLACE_OF_BIRTH = this.PLACE_OF_BIRTH;
	            other.PLACE_OF_BIRTH_UD = this.PLACE_OF_BIRTH_UD;
	            other.DECEASED = this.DECEASED;
	            other.DECEASED_UD = this.DECEASED_UD;
	            other.PASSPORTS = this.PASSPORTS;
	            other.PASSPORTS_UD = this.PASSPORTS_UD;
	            other.SSN = this.SSN;
	            other.SSN_UD = this.SSN_UD;
	            other.LOCATIONS = this.LOCATIONS;
	            other.LOCATIONS_UD = this.LOCATIONS_UD;
	            other.COUNTRIES = this.COUNTRIES;
	            other.COUNTRIES_UD = this.COUNTRIES_UD;
	            other.COMPANIES = this.COMPANIES;
	            other.COMPANIES_UD = this.COMPANIES_UD;
	            other.EI = this.EI;
	            other.EI_UD = this.EI_UD;
	            other.LINKED_TO = this.LINKED_TO;
	            other.LINKED_TO_UD = this.LINKED_TO_UD;
	            other.FUTHER_INFORMATION = this.FUTHER_INFORMATION;
	            other.FUTHER_INFORMATION_UD = this.FUTHER_INFORMATION_UD;
	            other.KEYWORDS = this.KEYWORDS;
	            other.KEYWORDS_UD = this.KEYWORDS_UD;
	            other.EXTERNAL_SOURCES = this.EXTERNAL_SOURCES;
	            other.EXTERNAL_SOURCES_UD = this.EXTERNAL_SOURCES_UD;
	            other.ENTERED = this.ENTERED;
	            other.ENTERED_UD = this.ENTERED_UD;
	            other.UPDATED = this.UPDATED;
	            other.UPDATED_UD = this.UPDATED_UD;
	            other.EDITOR = this.EDITOR;
	            other.EDITOR_UD = this.EDITOR_UD;
	            other.AGE_DATE = this.AGE_DATE;
	            other.AGE_DATE_UD = this.AGE_DATE_UD;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.UID = this.UID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NEWPRO_VIB_Convert.length) {
				if(length < 1024 && commonByteArray_NEWPRO_VIB_Convert.length == 0) {
   					commonByteArray_NEWPRO_VIB_Convert = new byte[1024];
				} else {
   					commonByteArray_NEWPRO_VIB_Convert = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NEWPRO_VIB_Convert, 0, length);
			strReturn = new String(commonByteArray_NEWPRO_VIB_Convert, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NEWPRO_VIB_Convert) {

        	try {

        		int length = 0;
		
					this.UID = readString(dis);
					
					this.LAST_NAME = readString(dis);
					
					this.LAST_NAME_UD = readString(dis);
					
					this.FIRST_NAME = readString(dis);
					
					this.FIRST_NAME_UD = readString(dis);
					
					this.ALIASES = readString(dis);
					
					this.ALIASES_UD = readString(dis);
					
					this.ALTERNATIVE_SPELLING = readString(dis);
					
					this.ALTERNATIVE_SPELLING_UD = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.CATEGORY_UD = readString(dis);
					
					this.TITLE = readString(dis);
					
					this.TITLE_UD = readString(dis);
					
					this.SUB_CATEGORY = readString(dis);
					
					this.SUB_CATEGORY_UD = readString(dis);
					
					this.POSITION = readString(dis);
					
					this.POSITION_UD = readString(dis);
					
					this.AGE = readString(dis);
					
					this.AGE_UD = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DOB_UD = readString(dis);
					
					this.PLACE_OF_BIRTH = readString(dis);
					
					this.PLACE_OF_BIRTH_UD = readString(dis);
					
					this.DECEASED = readString(dis);
					
					this.DECEASED_UD = readString(dis);
					
					this.PASSPORTS = readString(dis);
					
					this.PASSPORTS_UD = readString(dis);
					
					this.SSN = readString(dis);
					
					this.SSN_UD = readString(dis);
					
					this.LOCATIONS = readString(dis);
					
					this.LOCATIONS_UD = readString(dis);
					
					this.COUNTRIES = readString(dis);
					
					this.COUNTRIES_UD = readString(dis);
					
					this.COMPANIES = readString(dis);
					
					this.COMPANIES_UD = readString(dis);
					
					this.EI = readString(dis);
					
					this.EI_UD = readString(dis);
					
					this.LINKED_TO = readString(dis);
					
					this.LINKED_TO_UD = readString(dis);
					
					this.FUTHER_INFORMATION = readString(dis);
					
					this.FUTHER_INFORMATION_UD = readString(dis);
					
					this.KEYWORDS = readString(dis);
					
					this.KEYWORDS_UD = readString(dis);
					
					this.EXTERNAL_SOURCES = readString(dis);
					
					this.EXTERNAL_SOURCES_UD = readString(dis);
					
					this.ENTERED = readString(dis);
					
					this.ENTERED_UD = readString(dis);
					
					this.UPDATED = readString(dis);
					
					this.UPDATED_UD = readString(dis);
					
					this.EDITOR = readString(dis);
					
					this.EDITOR_UD = readString(dis);
					
					this.AGE_DATE = readString(dis);
					
					this.AGE_DATE_UD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.UID,dos);
					
					// String
				
						writeString(this.LAST_NAME,dos);
					
					// String
				
						writeString(this.LAST_NAME_UD,dos);
					
					// String
				
						writeString(this.FIRST_NAME,dos);
					
					// String
				
						writeString(this.FIRST_NAME_UD,dos);
					
					// String
				
						writeString(this.ALIASES,dos);
					
					// String
				
						writeString(this.ALIASES_UD,dos);
					
					// String
				
						writeString(this.ALTERNATIVE_SPELLING,dos);
					
					// String
				
						writeString(this.ALTERNATIVE_SPELLING_UD,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.CATEGORY_UD,dos);
					
					// String
				
						writeString(this.TITLE,dos);
					
					// String
				
						writeString(this.TITLE_UD,dos);
					
					// String
				
						writeString(this.SUB_CATEGORY,dos);
					
					// String
				
						writeString(this.SUB_CATEGORY_UD,dos);
					
					// String
				
						writeString(this.POSITION,dos);
					
					// String
				
						writeString(this.POSITION_UD,dos);
					
					// String
				
						writeString(this.AGE,dos);
					
					// String
				
						writeString(this.AGE_UD,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DOB_UD,dos);
					
					// String
				
						writeString(this.PLACE_OF_BIRTH,dos);
					
					// String
				
						writeString(this.PLACE_OF_BIRTH_UD,dos);
					
					// String
				
						writeString(this.DECEASED,dos);
					
					// String
				
						writeString(this.DECEASED_UD,dos);
					
					// String
				
						writeString(this.PASSPORTS,dos);
					
					// String
				
						writeString(this.PASSPORTS_UD,dos);
					
					// String
				
						writeString(this.SSN,dos);
					
					// String
				
						writeString(this.SSN_UD,dos);
					
					// String
				
						writeString(this.LOCATIONS,dos);
					
					// String
				
						writeString(this.LOCATIONS_UD,dos);
					
					// String
				
						writeString(this.COUNTRIES,dos);
					
					// String
				
						writeString(this.COUNTRIES_UD,dos);
					
					// String
				
						writeString(this.COMPANIES,dos);
					
					// String
				
						writeString(this.COMPANIES_UD,dos);
					
					// String
				
						writeString(this.EI,dos);
					
					// String
				
						writeString(this.EI_UD,dos);
					
					// String
				
						writeString(this.LINKED_TO,dos);
					
					// String
				
						writeString(this.LINKED_TO_UD,dos);
					
					// String
				
						writeString(this.FUTHER_INFORMATION,dos);
					
					// String
				
						writeString(this.FUTHER_INFORMATION_UD,dos);
					
					// String
				
						writeString(this.KEYWORDS,dos);
					
					// String
				
						writeString(this.KEYWORDS_UD,dos);
					
					// String
				
						writeString(this.EXTERNAL_SOURCES,dos);
					
					// String
				
						writeString(this.EXTERNAL_SOURCES_UD,dos);
					
					// String
				
						writeString(this.ENTERED,dos);
					
					// String
				
						writeString(this.ENTERED_UD,dos);
					
					// String
				
						writeString(this.UPDATED,dos);
					
					// String
				
						writeString(this.UPDATED_UD,dos);
					
					// String
				
						writeString(this.EDITOR,dos);
					
					// String
				
						writeString(this.EDITOR_UD,dos);
					
					// String
				
						writeString(this.AGE_DATE,dos);
					
					// String
				
						writeString(this.AGE_DATE_UD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UID="+UID);
		sb.append(",LAST_NAME="+LAST_NAME);
		sb.append(",LAST_NAME_UD="+LAST_NAME_UD);
		sb.append(",FIRST_NAME="+FIRST_NAME);
		sb.append(",FIRST_NAME_UD="+FIRST_NAME_UD);
		sb.append(",ALIASES="+ALIASES);
		sb.append(",ALIASES_UD="+ALIASES_UD);
		sb.append(",ALTERNATIVE_SPELLING="+ALTERNATIVE_SPELLING);
		sb.append(",ALTERNATIVE_SPELLING_UD="+ALTERNATIVE_SPELLING_UD);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",CATEGORY_UD="+CATEGORY_UD);
		sb.append(",TITLE="+TITLE);
		sb.append(",TITLE_UD="+TITLE_UD);
		sb.append(",SUB_CATEGORY="+SUB_CATEGORY);
		sb.append(",SUB_CATEGORY_UD="+SUB_CATEGORY_UD);
		sb.append(",POSITION="+POSITION);
		sb.append(",POSITION_UD="+POSITION_UD);
		sb.append(",AGE="+AGE);
		sb.append(",AGE_UD="+AGE_UD);
		sb.append(",DOB="+DOB);
		sb.append(",DOB_UD="+DOB_UD);
		sb.append(",PLACE_OF_BIRTH="+PLACE_OF_BIRTH);
		sb.append(",PLACE_OF_BIRTH_UD="+PLACE_OF_BIRTH_UD);
		sb.append(",DECEASED="+DECEASED);
		sb.append(",DECEASED_UD="+DECEASED_UD);
		sb.append(",PASSPORTS="+PASSPORTS);
		sb.append(",PASSPORTS_UD="+PASSPORTS_UD);
		sb.append(",SSN="+SSN);
		sb.append(",SSN_UD="+SSN_UD);
		sb.append(",LOCATIONS="+LOCATIONS);
		sb.append(",LOCATIONS_UD="+LOCATIONS_UD);
		sb.append(",COUNTRIES="+COUNTRIES);
		sb.append(",COUNTRIES_UD="+COUNTRIES_UD);
		sb.append(",COMPANIES="+COMPANIES);
		sb.append(",COMPANIES_UD="+COMPANIES_UD);
		sb.append(",EI="+EI);
		sb.append(",EI_UD="+EI_UD);
		sb.append(",LINKED_TO="+LINKED_TO);
		sb.append(",LINKED_TO_UD="+LINKED_TO_UD);
		sb.append(",FUTHER_INFORMATION="+FUTHER_INFORMATION);
		sb.append(",FUTHER_INFORMATION_UD="+FUTHER_INFORMATION_UD);
		sb.append(",KEYWORDS="+KEYWORDS);
		sb.append(",KEYWORDS_UD="+KEYWORDS_UD);
		sb.append(",EXTERNAL_SOURCES="+EXTERNAL_SOURCES);
		sb.append(",EXTERNAL_SOURCES_UD="+EXTERNAL_SOURCES_UD);
		sb.append(",ENTERED="+ENTERED);
		sb.append(",ENTERED_UD="+ENTERED_UD);
		sb.append(",UPDATED="+UPDATED);
		sb.append(",UPDATED_UD="+UPDATED_UD);
		sb.append(",EDITOR="+EDITOR);
		sb.append(",EDITOR_UD="+EDITOR_UD);
		sb.append(",AGE_DATE="+AGE_DATE);
		sb.append(",AGE_DATE_UD="+AGE_DATE_UD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UID, other.UID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.outputCSV)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";

	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row2.UID = "UID";
    	            	        	            	
    	            		row2.LAST_NAME = "LAST NAME";
    	            	        	            	
    	            		row2.LAST_NAME_UD = "LAST NAME UD";
    	            	        	            	
    	            		row2.FIRST_NAME = "FIRST NAME";
    	            	        	            	
    	            		row2.FIRST_NAME_UD = "FIRST NAME UD";
    	            	        	            	
    	            		row2.ALIASES = "ALIASES";
    	            	        	            	
    	            		row2.ALIASES_UD = "ALIASES UD";
    	            	        	            	
    	            		row2.ALTERNATIVE_SPELLING = "ALTERNATIVE SPELLING";
    	            	        	            	
    	            		row2.ALTERNATIVE_SPELLING_UD = "ALTERNATIVE SPELLING UD";
    	            	        	            	
    	            		row2.CATEGORY = "CATEGORY";
    	            	        	            	
    	            		row2.CATEGORY_UD = "CATEGORY UD";
    	            	        	            	
    	            		row2.TITLE = "TITLE";
    	            	        	            	
    	            		row2.TITLE_UD = "TITLE UD";
    	            	        	            	
    	            		row2.SUB_CATEGORY = "SUB-CATEGORY";
    	            	        	            	
    	            		row2.SUB_CATEGORY_UD = "SUB-CATEGORY UD";
    	            	        	            	
    	            		row2.POSITION = "POSITION";
    	            	        	            	
    	            		row2.POSITION_UD = "POSITION UD";
    	            	        	            	
    	            		row2.AGE = "AGE";
    	            	        	            	
    	            		row2.AGE_UD = "AGE UD";
    	            	        	            	
    	            		row2.DOB = "DOB";
    	            	        	            	
    	            		row2.DOB_UD = "DOB UD";
    	            	        	            	
    	            		row2.PLACE_OF_BIRTH = "PLACE OF BIRTH";
    	            	        	            	
    	            		row2.PLACE_OF_BIRTH_UD = "PLAVE OF BIRTH UD";
    	            	        	            	
    	            		row2.DECEASED = "DECEASED";
    	            	        	            	
    	            		row2.DECEASED_UD = "DECEASED UD";
    	            	        	            	
    	            		row2.PASSPORTS = "PASSPORTS";
    	            	        	            	
    	            		row2.PASSPORTS_UD = "PASSPORTS UD";
    	            	        	            	
    	            		row2.SSN = "SSN";
    	            	        	            	
    	            		row2.SSN_UD = "SSN UD";
    	            	        	            	
    	            		row2.LOCATIONS = "LOCATIONS";
    	            	        	            	
    	            		row2.LOCATIONS_UD = "LOCATIONS UD";
    	            	        	            	
    	            		row2.COUNTRIES = "COUNTRIES";
    	            	        	            	
    	            		row2.COUNTRIES_UD = "COUNTRIES UD";
    	            	        	            	
    	            		row2.COMPANIES = "COMPANIES";
    	            	        	            	
    	            		row2.COMPANIES_UD = "COMPANIES UD";
    	            	        	            	
    	            		row2.EI = "E/I";
    	            	        	            	
    	            		row2.EI_UD = "E/I UD";
    	            	        	            	
    	            		row2.LINKED_TO = "LINKED TO";
    	            	        	            	
    	            		row2.LINKED_TO_UD = "LINKED TO UD";
    	            	        	            	
    	            		row2.FUTHER_INFORMATION = "FURTHER INFORMATION";
    	            	        	            	
    	            		row2.FUTHER_INFORMATION_UD = "FURTHER INFORMATION UD";
    	            	        	            	
    	            		row2.KEYWORDS = "KEYWORDS";
    	            	        	            	
    	            		row2.KEYWORDS_UD = "KEYWORDS UD";
    	            	        	            	
    	            		row2.EXTERNAL_SOURCES = "EXTERNAL SOURCES";
    	            	        	            	
    	            		row2.EXTERNAL_SOURCES_UD = "EXTERNAL SOURCES UD";
    	            	        	            	
    	            		row2.ENTERED = "ENTERED";
    	            	        	            	
    	            		row2.ENTERED_UD = "ENTERED UD";
    	            	        	            	
    	            		row2.UPDATED = "UPDATED";
    	            	        	            	
    	            		row2.UPDATED_UD = "UPDATED UD";
    	            	        	            	
    	            		row2.EDITOR = "EDITOR";
    	            	        	            	
    	            		row2.EDITOR_UD = "EDITOR UD";
    	            	        	            	
    	            		row2.AGE_DATE = "AGE DATE";
    	            	        	            	
    	            		row2.AGE_DATE_UD = "AGE DATE UD";
    	            	
 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row2.UID != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.UID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.LAST_NAME != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.LAST_NAME
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.LAST_NAME_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.LAST_NAME_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.FIRST_NAME != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.FIRST_NAME
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.FIRST_NAME_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.FIRST_NAME_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.ALIASES != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.ALIASES
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.ALIASES_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.ALIASES_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.ALTERNATIVE_SPELLING != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.ALTERNATIVE_SPELLING
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.ALTERNATIVE_SPELLING_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.ALTERNATIVE_SPELLING_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.CATEGORY != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.CATEGORY
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.CATEGORY_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.CATEGORY_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.TITLE != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.TITLE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.TITLE_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.TITLE_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.SUB_CATEGORY != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.SUB_CATEGORY
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.SUB_CATEGORY_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.SUB_CATEGORY_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.POSITION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.POSITION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.POSITION_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.POSITION_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.AGE != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.AGE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.AGE_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.AGE_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.DOB != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.DOB
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.DOB_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.DOB_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.PLACE_OF_BIRTH != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.PLACE_OF_BIRTH
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.PLACE_OF_BIRTH_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.PLACE_OF_BIRTH_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.DECEASED != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.DECEASED
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.DECEASED_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.DECEASED_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.PASSPORTS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.PASSPORTS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.PASSPORTS_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.PASSPORTS_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.SSN != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.SSN
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.SSN_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.SSN_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.LOCATIONS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.LOCATIONS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.LOCATIONS_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.LOCATIONS_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.COUNTRIES != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.COUNTRIES
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.COUNTRIES_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.COUNTRIES_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.COMPANIES != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.COMPANIES
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.COMPANIES_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.COMPANIES_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.EI != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.EI
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.EI_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.EI_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.LINKED_TO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.LINKED_TO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.LINKED_TO_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.LINKED_TO_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.FUTHER_INFORMATION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.FUTHER_INFORMATION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.FUTHER_INFORMATION_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.FUTHER_INFORMATION_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.KEYWORDS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.KEYWORDS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.KEYWORDS_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.KEYWORDS_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.EXTERNAL_SOURCES != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.EXTERNAL_SOURCES
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.EXTERNAL_SOURCES_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.EXTERNAL_SOURCES_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.ENTERED != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.ENTERED
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.ENTERED_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.ENTERED_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.UPDATED != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.UPDATED
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.UPDATED_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.UPDATED_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.EDITOR != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.EDITOR
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.EDITOR_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.EDITOR_UD
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.AGE_DATE != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.AGE_DATE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.AGE_DATE_UD != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.AGE_DATE_UD
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFileInputExcel_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";

	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class mapStruct implements routines.system.IPersistableRow<mapStruct> {
    final static byte[] commonByteArrayLock_NEWPRO_VIB_Convert = new byte[0];
    static byte[] commonByteArray_NEWPRO_VIB_Convert = new byte[0];

	
			    public Integer UID;

				public Integer getUID () {
					return this.UID;
				}
				
			    public String LAST_NAME;

				public String getLAST_NAME () {
					return this.LAST_NAME;
				}
				
			    public String LAST_NAME_UD;

				public String getLAST_NAME_UD () {
					return this.LAST_NAME_UD;
				}
				
			    public String FIRST_NAME;

				public String getFIRST_NAME () {
					return this.FIRST_NAME;
				}
				
			    public String FIRST_NAME_UD;

				public String getFIRST_NAME_UD () {
					return this.FIRST_NAME_UD;
				}
				
			    public String ALIASES;

				public String getALIASES () {
					return this.ALIASES;
				}
				
			    public String ALIASES_UD;

				public String getALIASES_UD () {
					return this.ALIASES_UD;
				}
				
			    public String ALTERNATIVE_SPELLING;

				public String getALTERNATIVE_SPELLING () {
					return this.ALTERNATIVE_SPELLING;
				}
				
			    public String ALTERNATIVE_SPELLING_UD;

				public String getALTERNATIVE_SPELLING_UD () {
					return this.ALTERNATIVE_SPELLING_UD;
				}
				
			    public String CATEGORY;

				public String getCATEGORY () {
					return this.CATEGORY;
				}
				
			    public String CATEGORY_UD;

				public String getCATEGORY_UD () {
					return this.CATEGORY_UD;
				}
				
			    public String TITLE;

				public String getTITLE () {
					return this.TITLE;
				}
				
			    public String TITLE_UD;

				public String getTITLE_UD () {
					return this.TITLE_UD;
				}
				
			    public String SUB_CATEGORY;

				public String getSUB_CATEGORY () {
					return this.SUB_CATEGORY;
				}
				
			    public String SUB_CATEGORY_UD;

				public String getSUB_CATEGORY_UD () {
					return this.SUB_CATEGORY_UD;
				}
				
			    public String POSITION;

				public String getPOSITION () {
					return this.POSITION;
				}
				
			    public String POSITION_UD;

				public String getPOSITION_UD () {
					return this.POSITION_UD;
				}
				
			    public String AGE;

				public String getAGE () {
					return this.AGE;
				}
				
			    public String AGE_UD;

				public String getAGE_UD () {
					return this.AGE_UD;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String DOB_UD;

				public String getDOB_UD () {
					return this.DOB_UD;
				}
				
			    public String PLACE_OF_BIRTH;

				public String getPLACE_OF_BIRTH () {
					return this.PLACE_OF_BIRTH;
				}
				
			    public String PLACE_OF_BIRTH_UD;

				public String getPLACE_OF_BIRTH_UD () {
					return this.PLACE_OF_BIRTH_UD;
				}
				
			    public String DECEASED;

				public String getDECEASED () {
					return this.DECEASED;
				}
				
			    public String DECEASED_UD;

				public String getDECEASED_UD () {
					return this.DECEASED_UD;
				}
				
			    public String PASSPORTS;

				public String getPASSPORTS () {
					return this.PASSPORTS;
				}
				
			    public String PASSPORTS_UD;

				public String getPASSPORTS_UD () {
					return this.PASSPORTS_UD;
				}
				
			    public String SSN;

				public String getSSN () {
					return this.SSN;
				}
				
			    public String SSN_UD;

				public String getSSN_UD () {
					return this.SSN_UD;
				}
				
			    public String LOCATIONS;

				public String getLOCATIONS () {
					return this.LOCATIONS;
				}
				
			    public String LOCATIONS_UD;

				public String getLOCATIONS_UD () {
					return this.LOCATIONS_UD;
				}
				
			    public String COUNTRIES;

				public String getCOUNTRIES () {
					return this.COUNTRIES;
				}
				
			    public String COUNTRIES_UD;

				public String getCOUNTRIES_UD () {
					return this.COUNTRIES_UD;
				}
				
			    public String COMPANIES;

				public String getCOMPANIES () {
					return this.COMPANIES;
				}
				
			    public String COMPANIES_UD;

				public String getCOMPANIES_UD () {
					return this.COMPANIES_UD;
				}
				
			    public String EI;

				public String getEI () {
					return this.EI;
				}
				
			    public String EI_UD;

				public String getEI_UD () {
					return this.EI_UD;
				}
				
			    public String LINKED_TO;

				public String getLINKED_TO () {
					return this.LINKED_TO;
				}
				
			    public String LINKED_TO_UD;

				public String getLINKED_TO_UD () {
					return this.LINKED_TO_UD;
				}
				
			    public String FUTHER_INFORMATION;

				public String getFUTHER_INFORMATION () {
					return this.FUTHER_INFORMATION;
				}
				
			    public String FUTHER_INFORMATION_UD;

				public String getFUTHER_INFORMATION_UD () {
					return this.FUTHER_INFORMATION_UD;
				}
				
			    public String KEYWORDS;

				public String getKEYWORDS () {
					return this.KEYWORDS;
				}
				
			    public String KEYWORDS_UD;

				public String getKEYWORDS_UD () {
					return this.KEYWORDS_UD;
				}
				
			    public String EXTERNAL_SOURCES;

				public String getEXTERNAL_SOURCES () {
					return this.EXTERNAL_SOURCES;
				}
				
			    public String EXTERNAL_SOURCES_UD;

				public String getEXTERNAL_SOURCES_UD () {
					return this.EXTERNAL_SOURCES_UD;
				}
				
			    public String ENTERED;

				public String getENTERED () {
					return this.ENTERED;
				}
				
			    public String ENTERED_UD;

				public String getENTERED_UD () {
					return this.ENTERED_UD;
				}
				
			    public String UPDATED;

				public String getUPDATED () {
					return this.UPDATED;
				}
				
			    public String UPDATED_UD;

				public String getUPDATED_UD () {
					return this.UPDATED_UD;
				}
				
			    public String EDITOR;

				public String getEDITOR () {
					return this.EDITOR;
				}
				
			    public String EDITOR_UD;

				public String getEDITOR_UD () {
					return this.EDITOR_UD;
				}
				
			    public String AGE_DATE;

				public String getAGE_DATE () {
					return this.AGE_DATE;
				}
				
			    public String AGE_DATE_UD;

				public String getAGE_DATE_UD () {
					return this.AGE_DATE_UD;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NEWPRO_VIB_Convert.length) {
				if(length < 1024 && commonByteArray_NEWPRO_VIB_Convert.length == 0) {
   					commonByteArray_NEWPRO_VIB_Convert = new byte[1024];
				} else {
   					commonByteArray_NEWPRO_VIB_Convert = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NEWPRO_VIB_Convert, 0, length);
			strReturn = new String(commonByteArray_NEWPRO_VIB_Convert, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NEWPRO_VIB_Convert) {

        	try {

        		int length = 0;
		
						this.UID = readInteger(dis);
					
					this.LAST_NAME = readString(dis);
					
					this.LAST_NAME_UD = readString(dis);
					
					this.FIRST_NAME = readString(dis);
					
					this.FIRST_NAME_UD = readString(dis);
					
					this.ALIASES = readString(dis);
					
					this.ALIASES_UD = readString(dis);
					
					this.ALTERNATIVE_SPELLING = readString(dis);
					
					this.ALTERNATIVE_SPELLING_UD = readString(dis);
					
					this.CATEGORY = readString(dis);
					
					this.CATEGORY_UD = readString(dis);
					
					this.TITLE = readString(dis);
					
					this.TITLE_UD = readString(dis);
					
					this.SUB_CATEGORY = readString(dis);
					
					this.SUB_CATEGORY_UD = readString(dis);
					
					this.POSITION = readString(dis);
					
					this.POSITION_UD = readString(dis);
					
					this.AGE = readString(dis);
					
					this.AGE_UD = readString(dis);
					
					this.DOB = readString(dis);
					
					this.DOB_UD = readString(dis);
					
					this.PLACE_OF_BIRTH = readString(dis);
					
					this.PLACE_OF_BIRTH_UD = readString(dis);
					
					this.DECEASED = readString(dis);
					
					this.DECEASED_UD = readString(dis);
					
					this.PASSPORTS = readString(dis);
					
					this.PASSPORTS_UD = readString(dis);
					
					this.SSN = readString(dis);
					
					this.SSN_UD = readString(dis);
					
					this.LOCATIONS = readString(dis);
					
					this.LOCATIONS_UD = readString(dis);
					
					this.COUNTRIES = readString(dis);
					
					this.COUNTRIES_UD = readString(dis);
					
					this.COMPANIES = readString(dis);
					
					this.COMPANIES_UD = readString(dis);
					
					this.EI = readString(dis);
					
					this.EI_UD = readString(dis);
					
					this.LINKED_TO = readString(dis);
					
					this.LINKED_TO_UD = readString(dis);
					
					this.FUTHER_INFORMATION = readString(dis);
					
					this.FUTHER_INFORMATION_UD = readString(dis);
					
					this.KEYWORDS = readString(dis);
					
					this.KEYWORDS_UD = readString(dis);
					
					this.EXTERNAL_SOURCES = readString(dis);
					
					this.EXTERNAL_SOURCES_UD = readString(dis);
					
					this.ENTERED = readString(dis);
					
					this.ENTERED_UD = readString(dis);
					
					this.UPDATED = readString(dis);
					
					this.UPDATED_UD = readString(dis);
					
					this.EDITOR = readString(dis);
					
					this.EDITOR_UD = readString(dis);
					
					this.AGE_DATE = readString(dis);
					
					this.AGE_DATE_UD = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.UID,dos);
					
					// String
				
						writeString(this.LAST_NAME,dos);
					
					// String
				
						writeString(this.LAST_NAME_UD,dos);
					
					// String
				
						writeString(this.FIRST_NAME,dos);
					
					// String
				
						writeString(this.FIRST_NAME_UD,dos);
					
					// String
				
						writeString(this.ALIASES,dos);
					
					// String
				
						writeString(this.ALIASES_UD,dos);
					
					// String
				
						writeString(this.ALTERNATIVE_SPELLING,dos);
					
					// String
				
						writeString(this.ALTERNATIVE_SPELLING_UD,dos);
					
					// String
				
						writeString(this.CATEGORY,dos);
					
					// String
				
						writeString(this.CATEGORY_UD,dos);
					
					// String
				
						writeString(this.TITLE,dos);
					
					// String
				
						writeString(this.TITLE_UD,dos);
					
					// String
				
						writeString(this.SUB_CATEGORY,dos);
					
					// String
				
						writeString(this.SUB_CATEGORY_UD,dos);
					
					// String
				
						writeString(this.POSITION,dos);
					
					// String
				
						writeString(this.POSITION_UD,dos);
					
					// String
				
						writeString(this.AGE,dos);
					
					// String
				
						writeString(this.AGE_UD,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.DOB_UD,dos);
					
					// String
				
						writeString(this.PLACE_OF_BIRTH,dos);
					
					// String
				
						writeString(this.PLACE_OF_BIRTH_UD,dos);
					
					// String
				
						writeString(this.DECEASED,dos);
					
					// String
				
						writeString(this.DECEASED_UD,dos);
					
					// String
				
						writeString(this.PASSPORTS,dos);
					
					// String
				
						writeString(this.PASSPORTS_UD,dos);
					
					// String
				
						writeString(this.SSN,dos);
					
					// String
				
						writeString(this.SSN_UD,dos);
					
					// String
				
						writeString(this.LOCATIONS,dos);
					
					// String
				
						writeString(this.LOCATIONS_UD,dos);
					
					// String
				
						writeString(this.COUNTRIES,dos);
					
					// String
				
						writeString(this.COUNTRIES_UD,dos);
					
					// String
				
						writeString(this.COMPANIES,dos);
					
					// String
				
						writeString(this.COMPANIES_UD,dos);
					
					// String
				
						writeString(this.EI,dos);
					
					// String
				
						writeString(this.EI_UD,dos);
					
					// String
				
						writeString(this.LINKED_TO,dos);
					
					// String
				
						writeString(this.LINKED_TO_UD,dos);
					
					// String
				
						writeString(this.FUTHER_INFORMATION,dos);
					
					// String
				
						writeString(this.FUTHER_INFORMATION_UD,dos);
					
					// String
				
						writeString(this.KEYWORDS,dos);
					
					// String
				
						writeString(this.KEYWORDS_UD,dos);
					
					// String
				
						writeString(this.EXTERNAL_SOURCES,dos);
					
					// String
				
						writeString(this.EXTERNAL_SOURCES_UD,dos);
					
					// String
				
						writeString(this.ENTERED,dos);
					
					// String
				
						writeString(this.ENTERED_UD,dos);
					
					// String
				
						writeString(this.UPDATED,dos);
					
					// String
				
						writeString(this.UPDATED_UD,dos);
					
					// String
				
						writeString(this.EDITOR,dos);
					
					// String
				
						writeString(this.EDITOR_UD,dos);
					
					// String
				
						writeString(this.AGE_DATE,dos);
					
					// String
				
						writeString(this.AGE_DATE_UD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UID="+String.valueOf(UID));
		sb.append(",LAST_NAME="+LAST_NAME);
		sb.append(",LAST_NAME_UD="+LAST_NAME_UD);
		sb.append(",FIRST_NAME="+FIRST_NAME);
		sb.append(",FIRST_NAME_UD="+FIRST_NAME_UD);
		sb.append(",ALIASES="+ALIASES);
		sb.append(",ALIASES_UD="+ALIASES_UD);
		sb.append(",ALTERNATIVE_SPELLING="+ALTERNATIVE_SPELLING);
		sb.append(",ALTERNATIVE_SPELLING_UD="+ALTERNATIVE_SPELLING_UD);
		sb.append(",CATEGORY="+CATEGORY);
		sb.append(",CATEGORY_UD="+CATEGORY_UD);
		sb.append(",TITLE="+TITLE);
		sb.append(",TITLE_UD="+TITLE_UD);
		sb.append(",SUB_CATEGORY="+SUB_CATEGORY);
		sb.append(",SUB_CATEGORY_UD="+SUB_CATEGORY_UD);
		sb.append(",POSITION="+POSITION);
		sb.append(",POSITION_UD="+POSITION_UD);
		sb.append(",AGE="+AGE);
		sb.append(",AGE_UD="+AGE_UD);
		sb.append(",DOB="+DOB);
		sb.append(",DOB_UD="+DOB_UD);
		sb.append(",PLACE_OF_BIRTH="+PLACE_OF_BIRTH);
		sb.append(",PLACE_OF_BIRTH_UD="+PLACE_OF_BIRTH_UD);
		sb.append(",DECEASED="+DECEASED);
		sb.append(",DECEASED_UD="+DECEASED_UD);
		sb.append(",PASSPORTS="+PASSPORTS);
		sb.append(",PASSPORTS_UD="+PASSPORTS_UD);
		sb.append(",SSN="+SSN);
		sb.append(",SSN_UD="+SSN_UD);
		sb.append(",LOCATIONS="+LOCATIONS);
		sb.append(",LOCATIONS_UD="+LOCATIONS_UD);
		sb.append(",COUNTRIES="+COUNTRIES);
		sb.append(",COUNTRIES_UD="+COUNTRIES_UD);
		sb.append(",COMPANIES="+COMPANIES);
		sb.append(",COMPANIES_UD="+COMPANIES_UD);
		sb.append(",EI="+EI);
		sb.append(",EI_UD="+EI_UD);
		sb.append(",LINKED_TO="+LINKED_TO);
		sb.append(",LINKED_TO_UD="+LINKED_TO_UD);
		sb.append(",FUTHER_INFORMATION="+FUTHER_INFORMATION);
		sb.append(",FUTHER_INFORMATION_UD="+FUTHER_INFORMATION_UD);
		sb.append(",KEYWORDS="+KEYWORDS);
		sb.append(",KEYWORDS_UD="+KEYWORDS_UD);
		sb.append(",EXTERNAL_SOURCES="+EXTERNAL_SOURCES);
		sb.append(",EXTERNAL_SOURCES_UD="+EXTERNAL_SOURCES_UD);
		sb.append(",ENTERED="+ENTERED);
		sb.append(",ENTERED_UD="+ENTERED_UD);
		sb.append(",UPDATED="+UPDATED);
		sb.append(",UPDATED_UD="+UPDATED_UD);
		sb.append(",EDITOR="+EDITOR);
		sb.append(",EDITOR_UD="+EDITOR_UD);
		sb.append(",AGE_DATE="+AGE_DATE);
		sb.append(",AGE_DATE_UD="+AGE_DATE_UD);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_NEWPRO_VIB_Convert = new byte[0];
    static byte[] commonByteArray_NEWPRO_VIB_Convert = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}
				
			    public String AML_NAME;

				public String getAML_NAME () {
					return this.AML_NAME;
				}
				
			    public String AML_SOURCE;

				public String getAML_SOURCE () {
					return this.AML_SOURCE;
				}
				
			    public String AML_TYPE;

				public String getAML_TYPE () {
					return this.AML_TYPE;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String ADDRESS;

				public String getADDRESS () {
					return this.ADDRESS;
				}
				
			    public String ID_Number;

				public String getID_Number () {
					return this.ID_Number;
				}
				
			    public String ID_Type;

				public String getID_Type () {
					return this.ID_Type;
				}
				
			    public String COUNTRIES;

				public String getCOUNTRIES () {
					return this.COUNTRIES;
				}
				
			    public String PLACE_OF_BIRTH;

				public String getPLACE_OF_BIRTH () {
					return this.PLACE_OF_BIRTH;
				}
				
			    public String AML_REF;

				public String getAML_REF () {
					return this.AML_REF;
				}
				
			    public String OTHER;

				public String getOTHER () {
					return this.OTHER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NEWPRO_VIB_Convert.length) {
				if(length < 1024 && commonByteArray_NEWPRO_VIB_Convert.length == 0) {
   					commonByteArray_NEWPRO_VIB_Convert = new byte[1024];
				} else {
   					commonByteArray_NEWPRO_VIB_Convert = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NEWPRO_VIB_Convert, 0, length);
			strReturn = new String(commonByteArray_NEWPRO_VIB_Convert, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NEWPRO_VIB_Convert) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.AML_NAME = readString(dis);
					
					this.AML_SOURCE = readString(dis);
					
					this.AML_TYPE = readString(dis);
					
					this.DOB = readString(dis);
					
					this.ADDRESS = readString(dis);
					
					this.ID_Number = readString(dis);
					
					this.ID_Type = readString(dis);
					
					this.COUNTRIES = readString(dis);
					
					this.PLACE_OF_BIRTH = readString(dis);
					
					this.AML_REF = readString(dis);
					
					this.OTHER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.AML_NAME,dos);
					
					// String
				
						writeString(this.AML_SOURCE,dos);
					
					// String
				
						writeString(this.AML_TYPE,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.ADDRESS,dos);
					
					// String
				
						writeString(this.ID_Number,dos);
					
					// String
				
						writeString(this.ID_Type,dos);
					
					// String
				
						writeString(this.COUNTRIES,dos);
					
					// String
				
						writeString(this.PLACE_OF_BIRTH,dos);
					
					// String
				
						writeString(this.AML_REF,dos);
					
					// String
				
						writeString(this.OTHER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",AML_NAME="+AML_NAME);
		sb.append(",AML_SOURCE="+AML_SOURCE);
		sb.append(",AML_TYPE="+AML_TYPE);
		sb.append(",DOB="+DOB);
		sb.append(",ADDRESS="+ADDRESS);
		sb.append(",ID_Number="+ID_Number);
		sb.append(",ID_Type="+ID_Type);
		sb.append(",COUNTRIES="+COUNTRIES);
		sb.append(",PLACE_OF_BIRTH="+PLACE_OF_BIRTH);
		sb.append(",AML_REF="+AML_REF);
		sb.append(",OTHER="+OTHER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_NEWPRO_VIB_Convert = new byte[0];
    static byte[] commonByteArray_NEWPRO_VIB_Convert = new byte[0];

	
			    public String ID;

				public String getID () {
					return this.ID;
				}
				
			    public String AML_NAME;

				public String getAML_NAME () {
					return this.AML_NAME;
				}
				
			    public String AML_SOURCE;

				public String getAML_SOURCE () {
					return this.AML_SOURCE;
				}
				
			    public String AML_TYPE;

				public String getAML_TYPE () {
					return this.AML_TYPE;
				}
				
			    public String DOB;

				public String getDOB () {
					return this.DOB;
				}
				
			    public String ADDRESS;

				public String getADDRESS () {
					return this.ADDRESS;
				}
				
			    public String ID_Number;

				public String getID_Number () {
					return this.ID_Number;
				}
				
			    public String ID_Type;

				public String getID_Type () {
					return this.ID_Type;
				}
				
			    public String COUNTRIES;

				public String getCOUNTRIES () {
					return this.COUNTRIES;
				}
				
			    public String PLACE_OF_BIRTH;

				public String getPLACE_OF_BIRTH () {
					return this.PLACE_OF_BIRTH;
				}
				
			    public String AML_REF;

				public String getAML_REF () {
					return this.AML_REF;
				}
				
			    public String OTHER;

				public String getOTHER () {
					return this.OTHER;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_NEWPRO_VIB_Convert.length) {
				if(length < 1024 && commonByteArray_NEWPRO_VIB_Convert.length == 0) {
   					commonByteArray_NEWPRO_VIB_Convert = new byte[1024];
				} else {
   					commonByteArray_NEWPRO_VIB_Convert = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_NEWPRO_VIB_Convert, 0, length);
			strReturn = new String(commonByteArray_NEWPRO_VIB_Convert, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_NEWPRO_VIB_Convert) {

        	try {

        		int length = 0;
		
					this.ID = readString(dis);
					
					this.AML_NAME = readString(dis);
					
					this.AML_SOURCE = readString(dis);
					
					this.AML_TYPE = readString(dis);
					
					this.DOB = readString(dis);
					
					this.ADDRESS = readString(dis);
					
					this.ID_Number = readString(dis);
					
					this.ID_Type = readString(dis);
					
					this.COUNTRIES = readString(dis);
					
					this.PLACE_OF_BIRTH = readString(dis);
					
					this.AML_REF = readString(dis);
					
					this.OTHER = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ID,dos);
					
					// String
				
						writeString(this.AML_NAME,dos);
					
					// String
				
						writeString(this.AML_SOURCE,dos);
					
					// String
				
						writeString(this.AML_TYPE,dos);
					
					// String
				
						writeString(this.DOB,dos);
					
					// String
				
						writeString(this.ADDRESS,dos);
					
					// String
				
						writeString(this.ID_Number,dos);
					
					// String
				
						writeString(this.ID_Type,dos);
					
					// String
				
						writeString(this.COUNTRIES,dos);
					
					// String
				
						writeString(this.PLACE_OF_BIRTH,dos);
					
					// String
				
						writeString(this.AML_REF,dos);
					
					// String
				
						writeString(this.OTHER,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+ID);
		sb.append(",AML_NAME="+AML_NAME);
		sb.append(",AML_SOURCE="+AML_SOURCE);
		sb.append(",AML_TYPE="+AML_TYPE);
		sb.append(",DOB="+DOB);
		sb.append(",ADDRESS="+ADDRESS);
		sb.append(",ID_Number="+ID_Number);
		sb.append(",ID_Type="+ID_Type);
		sb.append(",COUNTRIES="+COUNTRIES);
		sb.append(",PLACE_OF_BIRTH="+PLACE_OF_BIRTH);
		sb.append(",AML_REF="+AML_REF);
		sb.append(",OTHER="+OTHER);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
mapStruct map = new mapStruct();






	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"map");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.outputCSV)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"UTF-8"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("UID");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LAST_NAME");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LAST_NAME_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("FIRST_NAME");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("FIRST_NAME_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALIASES");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALIASES_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALTERNATIVE_SPELLING");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ALTERNATIVE_SPELLING_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CATEGORY");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CATEGORY_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("TITLE");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("TITLE_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SUB_CATEGORY");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SUB_CATEGORY_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("POSITION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("POSITION_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("AGE");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("AGE_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DOB");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DOB_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PLACE_OF_BIRTH");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PLACE_OF_BIRTH_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DECEASED");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DECEASED_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PASSPORTS");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PASSPORTS_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SSN");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SSN_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LOCATIONS");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LOCATIONS_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("COUNTRIES");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("COUNTRIES_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("COMPANIES");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("COMPANIES_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("EI");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("EI_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LINKED_TO");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LINKED_TO_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("FUTHER_INFORMATION");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("FUTHER_INFORMATION_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("KEYWORDS");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("KEYWORDS_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("EXTERNAL_SOURCES");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("EXTERNAL_SOURCES_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ENTERED");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ENTERED_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("UPDATED");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("UPDATED_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("EDITOR");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("EDITOR_UD");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("AGE_DATE");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("AGE_DATE_UD");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_2", isFileGenerated_tFileOutputDelimited_2);
        resourceMap.put("filetFileOutputDelimited_2", filetFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	int var1;
	String var2;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
mapStruct map_tmp = new mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:ru1ycRTcN+6EZmg+VZuav0tzG4c5FOkudpSCng==");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = context.excelPath;
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1){
   			sheetList_tFileInputExcel_1.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
    	}
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 2;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1 && i_tFileInputExcel_1 - rowCount_tFileInputExcel_1 >= (begin_line_tFileInputExcel_1)
            	&& currentRows_tFileInputExcel_1 - footer_input_tFileInputExcel_1 > i_tFileInputExcel_1 - rowCount_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }else{
            	continue;
            }
		    row1 = null;
					int tempRowLength_tFileInputExcel_1 = 12;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
				List<Boolean> datelist_tFileInputExcel_1 = new java.util.ArrayList<Boolean>();
				List<String> patternlist_tFileInputExcel_1 = new java.util.ArrayList<String>();
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(true);
							patternlist_tFileInputExcel_1.add("dd/MM/yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
							datelist_tFileInputExcel_1.add(false);
							patternlist_tFileInputExcel_1.add("MM-dd-yyyy");
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									int dateColIndex_tFileInputExcel_1 = i;
                    	        	if(datelist_tFileInputExcel_1.get(dateColIndex_tFileInputExcel_1)){
                        	        	temp_row_tFileInputExcel_1[i] = FormatterUtils.format_Date(cell_tFileInputExcel_1.getDateCellValue(),patternlist_tFileInputExcel_1.get(dateColIndex_tFileInputExcel_1));
                            	   	} else{
                                		temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getDateCellValue().toString();
                                	}
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											int dateColIndex_tFileInputExcel_1 = i;
                    	        			if(datelist_tFileInputExcel_1.get(dateColIndex_tFileInputExcel_1)){
                        	        			temp_row_tFileInputExcel_1[i] = FormatterUtils.format_Date(cell_tFileInputExcel_1.getDateCellValue(),patternlist_tFileInputExcel_1.get(dateColIndex_tFileInputExcel_1));
                            	   			} else{
                                				temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                			}
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row1 = new row1Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "ID";

				row1.ID = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.ID = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "AML_NAME";

				row1.AML_NAME = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.AML_NAME = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "AML_SOURCE";

				row1.AML_SOURCE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.AML_SOURCE = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "AML_TYPE";

				row1.AML_TYPE = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.AML_TYPE = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "DOB";

				row1.DOB = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.DOB = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "ADDRESS";

				row1.ADDRESS = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.ADDRESS = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "ID_Number";

				row1.ID_Number = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.ID_Number = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "ID_Type";

				row1.ID_Type = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.ID_Type = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "COUNTRIES";

				row1.COUNTRIES = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.COUNTRIES = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "PLACE_OF_BIRTH";

				row1.PLACE_OF_BIRTH = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.PLACE_OF_BIRTH = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "AML_REF";

				row1.AML_REF = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.AML_REF = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "OTHER";

				row1.OTHER = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row1.OTHER = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

        if(emptyColumnCount_tFileInputExcel_1 >= 12){
        	break; //if meet the empty row, there will break the iterate.
        }
				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row1 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

    int lenght = 0;
String date = "";
java.util.Date dateTmp = null;
if(row1.DOB != null) {
	lenght = row1.DOB.length();
	if(lenght > 4) {
		dateTmp = new java.text.SimpleDateFormat("dd/MM/yyyy").parse(row1.DOB);
		date = new java.text.SimpleDateFormat("yyyy/MM/dd").format(dateTmp);
		//System.out.println(date + " ------  > 4");
	} else {
		row1.DOB = row1.DOB+"/00/00";
		date = row1.DOB;
		//System.out.println(date + " ------ < 4");
	}
} else {
	date = "";
}
//System.out.println(row1.DOB);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.var1 = Numeric.sequence("uid",1,1) ;
Var.var2 = ((row1.AML_TYPE.equals("Individual") || row1.AML_TYPE.equals("Individual/pep")) ? "I" : "E");// ###############################
        // ###############################
        // # Output tables

map = null;


// # Output table : 'map'
map_tmp.UID = Var.var1 ;
map_tmp.LAST_NAME = row1.AML_NAME ;
map_tmp.LAST_NAME_UD = null;
map_tmp.FIRST_NAME = null;
map_tmp.FIRST_NAME_UD = null;
map_tmp.ALIASES = row1.AML_NAME ;
map_tmp.ALIASES_UD = null;
map_tmp.ALTERNATIVE_SPELLING = null;
map_tmp.ALTERNATIVE_SPELLING_UD = null;
map_tmp.CATEGORY = row1.AML_TYPE ;
map_tmp.CATEGORY_UD = null;
map_tmp.TITLE = null;
map_tmp.TITLE_UD = null;
map_tmp.SUB_CATEGORY = null;
map_tmp.SUB_CATEGORY_UD = null;
map_tmp.POSITION = null;
map_tmp.POSITION_UD = null;
map_tmp.AGE = null;
map_tmp.AGE_UD = null;
map_tmp.DOB = date;
map_tmp.DOB_UD = null;
map_tmp.PLACE_OF_BIRTH = row1.PLACE_OF_BIRTH ;
map_tmp.PLACE_OF_BIRTH_UD = null;
map_tmp.DECEASED = null;
map_tmp.DECEASED_UD = null;
map_tmp.PASSPORTS = row1.ID_Number ;
map_tmp.PASSPORTS_UD = null;
map_tmp.SSN = null;
map_tmp.SSN_UD = null;
map_tmp.LOCATIONS = row1.ADDRESS ;
map_tmp.LOCATIONS_UD = null;
map_tmp.COUNTRIES = row1.COUNTRIES ;
map_tmp.COUNTRIES_UD = null;
map_tmp.COMPANIES = null;
map_tmp.COMPANIES_UD = null;
map_tmp.EI = Var.var2 ;
map_tmp.EI_UD = null;
map_tmp.LINKED_TO = null;
map_tmp.LINKED_TO_UD = null;
map_tmp.FUTHER_INFORMATION = row1.AML_REF ;
map_tmp.FUTHER_INFORMATION_UD = null;
map_tmp.KEYWORDS = row1.AML_SOURCE ;
map_tmp.KEYWORDS_UD = null;
map_tmp.EXTERNAL_SOURCES = null;
map_tmp.EXTERNAL_SOURCES_UD = null;
map_tmp.ENTERED = null;
map_tmp.ENTERED_UD = null;
map_tmp.UPDATED = null;
map_tmp.UPDATED_UD = null;
map_tmp.EDITOR = null;
map_tmp.EDITOR_UD = null;
map_tmp.AGE_DATE = null;
map_tmp.AGE_DATE_UD = null;
map = map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "map"
if(map != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"map");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(map.UID != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.UID
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.LAST_NAME != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.LAST_NAME
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.LAST_NAME_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.LAST_NAME_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.FIRST_NAME != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.FIRST_NAME
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.FIRST_NAME_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.FIRST_NAME_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.ALIASES != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.ALIASES
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.ALIASES_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.ALIASES_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.ALTERNATIVE_SPELLING != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.ALTERNATIVE_SPELLING
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.ALTERNATIVE_SPELLING_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.ALTERNATIVE_SPELLING_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.CATEGORY != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.CATEGORY
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.CATEGORY_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.CATEGORY_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.TITLE != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.TITLE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.TITLE_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.TITLE_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.SUB_CATEGORY != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.SUB_CATEGORY
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.SUB_CATEGORY_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.SUB_CATEGORY_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.POSITION != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.POSITION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.POSITION_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.POSITION_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.AGE != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.AGE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.AGE_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.AGE_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.DOB != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.DOB
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.DOB_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.DOB_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.PLACE_OF_BIRTH != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.PLACE_OF_BIRTH
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.PLACE_OF_BIRTH_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.PLACE_OF_BIRTH_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.DECEASED != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.DECEASED
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.DECEASED_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.DECEASED_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.PASSPORTS != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.PASSPORTS
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.PASSPORTS_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.PASSPORTS_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.SSN != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.SSN
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.SSN_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.SSN_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.LOCATIONS != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.LOCATIONS
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.LOCATIONS_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.LOCATIONS_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.COUNTRIES != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.COUNTRIES
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.COUNTRIES_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.COUNTRIES_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.COMPANIES != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.COMPANIES
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.COMPANIES_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.COMPANIES_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.EI != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.EI
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.EI_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.EI_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.LINKED_TO != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.LINKED_TO
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.LINKED_TO_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.LINKED_TO_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.FUTHER_INFORMATION != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.FUTHER_INFORMATION
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.FUTHER_INFORMATION_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.FUTHER_INFORMATION_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.KEYWORDS != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.KEYWORDS
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.KEYWORDS_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.KEYWORDS_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.EXTERNAL_SOURCES != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.EXTERNAL_SOURCES
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.EXTERNAL_SOURCES_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.EXTERNAL_SOURCES_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.ENTERED != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.ENTERED
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.ENTERED_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.ENTERED_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.UPDATED != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.UPDATED
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.UPDATED_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.UPDATED_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.EDITOR != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.EDITOR
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.EDITOR_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.EDITOR_UD
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.AGE_DATE != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.AGE_DATE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(map.AGE_DATE_UD != null) {
                        sb_tFileOutputDelimited_2.append(
                            map.AGE_DATE_UD
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "map"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		
 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_2 && nb_line_tFileOutputDelimited_2 == 0){
				
					filetFileOutputDelimited_2.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"map");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_2"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_2"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_2")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final VIB_Convert VIB_ConvertClass = new VIB_Convert();

        int exitCode = VIB_ConvertClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = VIB_Convert.class.getClassLoader().getResourceAsStream("newpro/vib_convert_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = VIB_Convert.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("excelPath", "id_File");
                            context.excelPath=(String) context.getProperty("excelPath");
                        context.setContextType("outputCSV", "id_File");
                            context.outputCSV=(String) context.getProperty("outputCSV");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("excelPath")) {
                context.excelPath = (String) parentContextMap.get("excelPath");
            }if (parentContextMap.containsKey("outputCSV")) {
                context.outputCSV = (String) parentContextMap.get("outputCSV");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFixedFlowInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFixedFlowInput_1) {
globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", -1);

e_tFixedFlowInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : VIB_Convert");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     172338 characters generated by Talend Open Studio for Data Integration 
 *     on the September 4, 2020 4:16:42 PM ICT
 ************************************************************************************************/